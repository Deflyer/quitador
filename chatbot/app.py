"""
Aplica√ß√£o Flask - Chatbot de Pagamento de Boletos BTG
"""
from flask import Flask, render_template, request, jsonify, session
import os
import sys
from datetime import datetime
import secrets

# Adiciona diret√≥rios ao path
sys.path.append(os.path.dirname(__file__))

from chatbot_manager import ChatbotManager

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# Armazena sess√µes de chatbot (em produ√ß√£o, usar Redis ou banco de dados)
chatbot_sessions = {}


def get_chatbot(session_id: str) -> ChatbotManager:
    """Obt√©m ou cria uma inst√¢ncia do chatbot para a sess√£o"""
    if session_id not in chatbot_sessions:
        # CNPJ padr√£o para demonstra√ß√£o
        cnpj_padrao = "12.345.678/0001-90"
        saldo_padrao = 10000.0
        
        chatbot_sessions[session_id] = ChatbotManager(
            cnpj=cnpj_padrao,
            saldo_atual=saldo_padrao,
            nome_usuario="C√©lia"
        )
    
    return chatbot_sessions[session_id]


@app.route('/')
def index():
    """P√°gina principal do chatbot"""
    # Gera um ID de sess√£o se n√£o existir
    if 'session_id' not in session:
        session['session_id'] = secrets.token_hex(16)
    
    return render_template('index.html')


@app.route('/api/message', methods=['POST'])
def message():
    """Endpoint para processar mensagens do usu√°rio"""
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        
        if not user_message:
            return jsonify({'error': 'Mensagem vazia'}), 400
        
        # Obt√©m o chatbot da sess√£o
        session_id = session.get('session_id')
        if not session_id:
            session['session_id'] = secrets.token_hex(16)
            session_id = session['session_id']
        
        chatbot = get_chatbot(session_id)
        
        # Processa a mensagem
        resposta = chatbot.processar_mensagem(user_message)
        
        return jsonify({
            'response': resposta,
            'estado': chatbot.estado.value,
            'saldo_atual': chatbot.saldo_atual,
            'timestamp': datetime.now().isoformat()
        })
    
    except Exception as e:
        return jsonify({'error': f'Erro ao processar mensagem: {str(e)}'}), 500



@app.route('/api/historico', methods=['GET'])
def historico():
    """Retorna o hist√≥rico da conversa"""
    try:
        session_id = session.get('session_id')
        if not session_id:
            return jsonify({'historico': []})
        
        chatbot = get_chatbot(session_id)
        
        return jsonify({
            'historico': chatbot.historico,
            'saldo_atual': chatbot.saldo_atual
        })
    
    except Exception as e:
        return jsonify({'error': f'Erro ao obter hist√≥rico: {str(e)}'}), 500


if __name__ == '__main__':
    # Cria diret√≥rio de templates se n√£o existir
    os.makedirs('templates', exist_ok=True)
    os.makedirs('static', exist_ok=True)
    
    print("üöÄ Iniciando Chatbot de Pagamentos BTG...")
    print("üìç Acesse: http://localhost:5000")
    
    app.run(debug=True, host='0.0.0.0', port=5000)

